# Генераторні вирази

# Існує два схожих, але з різною поведінкою, підходи до створення ітераторів в Python: генераторні вирази та списки генераторів.

# 1)   Генераторні вирази (Generator Expressions):
#    Генераторні вирази є схожими на спискові вирази, але використовують круглі дужки замість квадратних.
#    Генераторні вирази створюють генератор, що дозволяє вам ітерувати через значення "на льоту" без зберігання їх у пам'яті.
#    Вони є лінивими, тобто генерують значення тільки тоді, коли вони запитуються.
#    Синтаксис: (вираз for змінна in послідовність if умова).
#    Приклад генераторного виразу:


#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ГЕНЕРАТОР - ітератор, елементи якого можна ітерувати лише один раз!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


generator_expression = (x**2 for x in range(10))
print(generator_expression)  # <generator object <genexpr> at 0x7f1cd6b42570>



# 2)   Списки генераторів (List Comprehensions):
#    Списки генераторів створюють список з результатів виразу для кожного значення у послідовності.
#    Вони використовують квадратні дужки та генерують всі значення одразу.
#    Синтаксис: [вираз for змінна in послідовність if умова].
#    Приклад списку генератора:


#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ІТЕРАТОР - об'єкт, який підтримую функцію next(). Пам'ятає, який елемент буде братися іншим разом <<<<<<<<<<<<<<<<<<<<


list_comprehension = [x**2 for x in range(10)]
print(list_comprehension)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
# Основна різниця полягає в тому, що генераторні вирази створюють генератор і ефективні з точки зору використання пам'яті, оскільки генерують значення "по запиту". Списки генераторів створюють списки і витрачають пам'ять на зберігання всіх значень одразу. 
# Тому, якщо у вас є велика послідовність і вам необхідно оптимізувати використання пам'яті, генераторні вирази можуть бути кращим варіантом.


#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Ітеруємий об'єкт - об'єкт, який дає можливість обійти по черзі свої елементи. Може бути перетворний в ітератор<<<<<<<
